name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: [self-hosted]
    container:
      image: golangci/golangci-lint:v1.61.0
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run golangci-lint
        run: |
          cd $GITHUB_WORKSPACE
          golangci-lint run --timeout=5m --build-tags=ignore_autogenerated -v --allow-parallel-runners --build-tags=netgo --modules-download-mode=readonly --max-issues-per-linter=0 --max-same-issues=0 --out-format=colored-line-number --go=1.19 --enable=revive --issues-exit-code=1 -c .golangci.yml

  unit_test:
    name: Unit Tests
    runs-on: [self-hosted]
    container:
      image: golang:1.23.1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run Unit Tests
        run: |
          echo "Running tests..."
          go test -v --run=Unit ./...

  build_and_push:
    name: Build and Push Docker Image
    runs-on: [self-hosted]
    needs: [lint, unit_test]
    environment: personal
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    env:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      IMAGE_TAG: ${{ secrets.AWS_ECR_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Login to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_TAG }} .
      - name: Push Docker Image
        run: |
          echo "Pushing Docker image to registry...."
          docker push ${{ env.IMAGE_TAG }}
      - name: Logout from AWS ECR
        if: always()
        run: docker logout ${{ secrets.AWS_ECR_REGISTRY }}

  deploy_prod:
    name: Deploy to Main (Production)
    runs-on: [self-hosted]
    environment: personal
    needs: build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REPOSITORY: ${{ secrets.AWS_ECR_REGISTRY }}/${{ github.event.repository.name }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          cluster-name: ${{ secrets.AWS_EKS_CLUSTER }}
          config-files: ./build/helm/values.yaml
          chart-path: ./build/helm
          namespace: personal
          values: |
            image.tag=${{ env.IMAGE_TAG }},
            image.repository=${{ env.REPOSITORY }},
            replicaCount=2,
            httpIngress.enabled=true,
            httpIngress.hosts[0].host=mail.bricealdrich.com,
            httpIngress.hosts[0].paths[0].path=/,
            httpIngress.hosts[0].paths[0].pathType=ImplementationSpecific,
            httpIngress.tls[0].secretName=mail-bricealdrich-com-tls,
            httpIngress.tls[0].hosts[0]=mail.bricealdrich.com,
            env.enableGRPCGateway=true,
            grpcIngress.enabled=false
            fromEmail=${{ secrets.FROM_EMAIL }},
            forwardEmail=${{ secrets.FORWARD_EMAIL }},
            forwardEmailTemplate=${{ secrets.FORWARD_TEMPLATE }},
            thankYouEmailTemplate=${{ secrets.THANKYOU_TEMPLATE }}
          name: email-service

  deploy_intg:
    name: Deploy PR (Staging)
    runs-on: [self-hosted]
    environment: personal-intg
    needs: build_and_push
    if: github.event_name == 'pull_request'
    env:
      REPOSITORY: ${{ secrets.AWS_ECR_REGISTRY }}/${{ github.event.repository.name }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          cluster-name: ${{ secrets.AWS_EKS_CLUSTER }}
          config-files: ./build/helm/values.yaml
          chart-path: ./build/helm
          namespace: personal-intg
          values: |
            image.tag=${{ env.IMAGE_TAG }},
            image.repository=${{ env.REPOSITORY }},
            httpIngress.enabled=true,
            httpIngress.hosts[0].host=intg.mail.bricealdrich.com,
            httpIngress.hosts[0].paths[0].path=/,
            httpIngress.hosts[0].paths[0].pathType=ImplementationSpecific,
            httpIngress.tls[0].secretName=intg-mail-bricealdrich-com-tls,
            httpIngress.tls[0].hosts[0]=intg.mail.bricealdrich.com,
            env.enableGRPCGateway=true,
            grpcIngress.enabled=false,
            fromEmail=${{ secrets.FROM_EMAIL }},
            forwardEmail=${{ secrets.FORWARD_EMAIL }},
            forwardEmailTemplate=${{ secrets.FORWARD_TEMPLATE }},
            thankYouEmailTemplate=${{ secrets.THANKYOU_TEMPLATE }}
          name: email-service-intg-${{ github.event.pull_request.number }}