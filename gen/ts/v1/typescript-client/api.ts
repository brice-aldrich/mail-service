/* tslint:disable */
/* eslint-disable */
/**
 * MailService API
 * The MailService is a simple mail forward service for frontend contact pages.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    [key: string]: any;

    /**
     * The type of the serialized message.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface SendMailRequest
 */
export interface SendMailRequest {
    /**
     * 
     * @type {string}
     * @memberof SendMailRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendMailRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendMailRequest
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendMailRequest
     */
    'message'?: string;
}
/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
     * @type {number}
     * @memberof Status
     */
    'code'?: number;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
     * @type {string}
     * @memberof Status
     */
    'message'?: string;
    /**
     * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
     * @type {Array<GoogleProtobufAny>}
     * @memberof Status
     */
    'details'?: Array<GoogleProtobufAny>;
}

/**
 * MailServiceApi - axios parameter creator
 * @export
 */
export const MailServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendMailRequest} sendMailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailServiceSendMail: async (sendMailRequest: SendMailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendMailRequest' is not null or undefined
            assertParamExists('mailServiceSendMail', 'sendMailRequest', sendMailRequest)
            const localVarPath = `/v1/mail/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailServiceApi - functional programming interface
 * @export
 */
export const MailServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendMailRequest} sendMailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailServiceSendMail(sendMailRequest: SendMailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailServiceSendMail(sendMailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MailServiceApi.mailServiceSendMail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MailServiceApi - factory interface
 * @export
 */
export const MailServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {MailServiceApiMailServiceSendMailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailServiceSendMail(requestParameters: MailServiceApiMailServiceSendMailRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.mailServiceSendMail(requestParameters.sendMailRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mailServiceSendMail operation in MailServiceApi.
 * @export
 * @interface MailServiceApiMailServiceSendMailRequest
 */
export interface MailServiceApiMailServiceSendMailRequest {
    /**
     * 
     * @type {SendMailRequest}
     * @memberof MailServiceApiMailServiceSendMail
     */
    readonly sendMailRequest: SendMailRequest
}

/**
 * MailServiceApi - object-oriented interface
 * @export
 * @class MailServiceApi
 * @extends {BaseAPI}
 */
export class MailServiceApi extends BaseAPI {
    /**
     * 
     * @param {MailServiceApiMailServiceSendMailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailServiceApi
     */
    public mailServiceSendMail(requestParameters: MailServiceApiMailServiceSendMailRequest, options?: RawAxiosRequestConfig) {
        return MailServiceApiFp(this.configuration).mailServiceSendMail(requestParameters.sendMailRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



